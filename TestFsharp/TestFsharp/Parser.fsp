%{


%}

// The start token becomes a parser function in the compiled code:
%start start

// Regular tokens
%token ONACID
%token COMMIT
%token SPAWN
%token ENDSPAWN

// Misc tokens
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < string list > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  
start: File { [$1] }

File:
	| ONACID   { "+1" }
	| COMMIT    { "-1" }
	| SPAWN    { "(" }
	| ENDSPAWN    { ")" }
	| EOF {""}
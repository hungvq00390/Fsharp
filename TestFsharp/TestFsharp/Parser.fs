// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"




# 11 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | INT of (int)
  | THREAD
  | ENDSPAWN
  | SPAWN
  | COMMIT
  | ONACID
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_INT
    | TOKEN_THREAD
    | TOKEN_ENDSPAWN
    | TOKEN_SPAWN
    | TOKEN_COMMIT
    | TOKEN_ONACID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_File

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | INT _ -> 1 
  | THREAD  -> 2 
  | ENDSPAWN  -> 3 
  | SPAWN  -> 4 
  | COMMIT  -> 5 
  | ONACID  -> 6 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_INT 
  | 2 -> TOKEN_THREAD 
  | 3 -> TOKEN_ENDSPAWN 
  | 4 -> TOKEN_SPAWN 
  | 5 -> TOKEN_COMMIT 
  | 6 -> TOKEN_ONACID 
  | 9 -> TOKEN_end_of_input
  | 7 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_File 
    | 3 -> NONTERM_File 
    | 4 -> NONTERM_File 
    | 5 -> NONTERM_File 
    | 6 -> NONTERM_File 
    | 7 -> NONTERM_File 
    | 8 -> NONTERM_File 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 9 
let _fsyacc_tagOfErrorTerminal = 7

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | INT _ -> "INT" 
  | THREAD  -> "THREAD" 
  | ENDSPAWN  -> "ENDSPAWN" 
  | SPAWN  -> "SPAWN" 
  | COMMIT  -> "COMMIT" 
  | ONACID  -> "ONACID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | INT _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | THREAD  -> (null : System.Object) 
  | ENDSPAWN  -> (null : System.Object) 
  | SPAWN  -> (null : System.Object) 
  | COMMIT  -> (null : System.Object) 
  | ONACID  -> (null : System.Object) 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 14us; 16us; 18us; |]
let _fsyacc_action_rows = 10
let _fsyacc_actionTableElements = [|7us; 32768us; 0us; 7us; 1us; 9us; 2us; 8us; 3us; 6us; 4us; 5us; 5us; 4us; 6us; 3us; 0us; 49152us; 0us; 16385us; 0us; 16386us; 0us; 16387us; 0us; 16388us; 0us; 16389us; 0us; 16390us; 0us; 16391us; 0us; 16392us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 8us; 9us; 10us; 11us; 12us; 13us; 14us; 15us; 16us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 16385us; 16386us; 16387us; 16388us; 16389us; 16390us; 16391us; 16392us; |]
let _fsyacc_reductions ()  =    [| 
# 112 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data :  string list )) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 121 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'File)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                                   [_1] 
                   )
# 27 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                 :  string list ));
# 132 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 30 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                                    "+1" 
                   )
# 30 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                 : 'File));
# 142 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 31 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                                    "-1" 
                   )
# 31 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                 : 'File));
# 152 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 32 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                                 "(" 
                   )
# 32 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                 : 'File));
# 162 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 33 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                                    ")" 
                   )
# 33 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                 : 'File));
# 172 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 34 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                               "" 
                   )
# 34 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                 : 'File));
# 182 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 35 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                                 "#"
                   )
# 35 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                 : 'File));
# 192 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : int)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                                    "INT"
                   )
# 36 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fsp"
                 : 'File));
|]
# 204 "C:\Users\Hung\Documents\GitHub\Fsharp\TestFsharp\TestFsharp\Parser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 10;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  string list  =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
